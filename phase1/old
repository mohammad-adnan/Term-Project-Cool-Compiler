
/*
 * keywords
 */
<INITIAL>[cC][lL][aA][sS][sS]	{return CLASS;}
<INITIAL>[eE][lL][sS][eE]	{return ELSE;}
<INITIAL>[fF][iI]	{return FI;}
<INITIAL>[iI][fF]	{return IF;}
<INITIAL>[iI][nN]	{return IN;}
<INITIAL>[iI][nN][hH][eE][rR][iI][tT][sS]	{return INHERITS;}
<INITIAL>[lL][eE][tT]	{return LET;}
<INITIAL>[lL][oO][oO][pP]	{return LOOP;}
<INITIAL>[pP][oO][oO][lL]	{return POOL;}
<INITIAL>[tT][hH][eE][nN]	{return THEN;}
<INITIAL>[wW][hH][iI][lL][eE]	{return WHILE;}
<INITIAL>[cC][aA][sS][eE]	{return CASE;}
<INITIAL>[eE][sS][aA][cC]	{return ESAC;}
<INITIAL>[oO][fF]	{return OF;}
<INITIAL>[nN][eE][wW]	{return NEW;}
<INITIAL>[iI][sS][vV][oO][iI][dD]	{return ISVOID;}
<INITIAL>[nN][oO][tT]	{return NOT;}

<INITIAL>t[rR][uU][eE] {yylval.boolean = 1; return BOOL_CONST;}
<INITIAL>f[aA][lL][sS][eE] {yylval.boolean = 0; return BOOL_CONST;}

 
/*
 * Integers, identifiers, and key notations
 */
<INITIAL>[0-9]+ {yylval.symbol = inttable.add_string(yytext); return INT_CONST;}
<INITIAL>[A-Z][a-zA-Z0-9_]*  {yylval.symbol = inttable.add_string(yytext); return TYPEID;}
<INITIAL>[a-z][a-zA-Z0-9_]*  {yylval.symbol = inttable.add_string(yytext); return OBJECTID;}

<INITIAL>[;,\(\){}:@\.\+\-\*/~<=] {return (int)yytext[0];}

<INITIAL>"=>"		{ return (DARROW); }
<INITIAL>"<-"		{ return (ASSIGN); }
<INITIAL>"<="		{ return (LE); }

<INITIAL>. {MY_ERROR(yytext)}	/*Character that can't begin any battee5*/

/*
 * Comments
 */
 /*Single-line comment*/
<INITIAL>-- {BEGIN IN_SINGLE_COMMENT;}
<IN_SINGLE_COMMENT>\n {++curr_lineno; BEGIN INITIAL;}
<IN_SINGLE_COMMENT>. {}
/*Multiple-line comment*/
<INITIAL>\(\* {nOpenComments = 1; BEGIN IN_MUL_COMMENT;}
<IN_MUL_COMMENT>\(\* {++nOpenComments;}
<IN_MUL_COMMENT>\n {++curr_lineno;}
<IN_MUL_COMMENT><<EOF>> {MY_ERROR("EOF in comment!")}
<IN_MUL_COMMENT>\*\) {--nOpenComments; if (nOpenComments == 0) BEGIN INITIAL;}
<IN_MUL_COMMENT>. {}

/*
 * Strings
 */
<INITIAL>\" {BEGIN IN_STRING;}
<IN_STRING>\\ {BEGIN IN_STRING_ESCAPE;}
<IN_STRING>\n {++curr_lineno; stringCharacters = ""; MY_ERROR("New line in string!")}
<IN_STRING>\0 {stringCharacters = ""; MY_ERROR("NULL in string!")}
<IN_STRING><<EOF>> {stringCharacters = ""; MY_ERROR("EOF in string!")}
<IN_STRING>\" {yylval.symbol = stringCharacters.c_str(); stringCharacters = ""; BEGIN INITIAL; return STR_CONST;}
<IN_STRING>. {stringCharacters += yytext[0];}
<IN_STRING_ESCAPE>\n {++curr_lineno; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>\0 {stringCharacters = ""; MY_ERROR("NULL in string!")}
<IN_STRING_ESCAPE><<EOF>> {stringCharacters = ""; MY_ERROR("EOF in string!")}
<IN_STRING_ESCAPE>b {stringCharacters += "\b"; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>t {stringCharacters += "\t"; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>n {stringCharacters += "\n"; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>f {stringCharacters += "\f"; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>0 {stringCharacters += "\0"; BEGIN IN_STRING;}
<IN_STRING_ESCAPE>. {stringCharacters += yytext[0]; BEGIN IN_STRING;}
